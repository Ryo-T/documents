gitの使い方

-----------------------------
■初期設定
-----------------------------
・コンフィグ設定
$ git config --global user.name "ユーザ名"
$ git config --global user.email "メールアドレス"

・gitの出力をカラーリング
$ git config --global color.ui auto

・新しいローカルリポジトリ作成
$ git init

・リモートリポジトリの登録
$ git remote add [名前(origin)] [URL]
・リモートリポジトリの確認
$ git remote -v

・みんなやっておくといい(ffしない)
$ git config --global --add merge.ff false
$ git config --global --add pull.ff only
-----------------------------
■基本
-----------------------------
・リポジトリの複製
$ git clone [リモートリポジトリURL] [ディレクトリ名]

・プル
$ git pull origin master

・アド
$ git add [ファイル名]
($ git add --all #変更したファイル全部)

・コミット
$ git commit -m "コメント"

・プッシュ
$ git push -u origin master

・状態の確認
$ git status

・ログの確認
$ git log

・わかりやすいグラフで確認
$ git log --graph --oneline --decorate=full
-----------------------------
■ブランチを切って作業
-----------------------------
・ブランチの作成
$ git branch [ブランチ名]

・ブランチの確認
$ git branch

・ブランチの切り替え
$ git checkout [ブランチ名]
・ブランチを作成して切り替え
$ git checkout -b [ブランチ名]

・ブランチのマージ
$ git chekout master
$ git merge [取り込むブランチ名]

・ブランチの削除
$ git branch -d [ブランチ名]

-----------------------------
■衝突解決
-----------------------------
・マスターブランチへ移動
$ git checkout master

・ブランチAをマージ
$ git merge [ブランチA]

・ブランチBをマージ
$ git merge [ブランチB]

>>衝突

before
*******内容*******
<<<<<<< HEAD
ブランチAの変更
=======
ブランチBの変更
>>>>>>> issue3
******************

after
*******内容*******
ブランチAの変更
ブランチBの変更
******************

・コミット
$ git add [ファイル名]
$ git commit -m "ブランチBをマージ"

-----------------------------
■rebaseでマージ
-----------------------------
・マージしたいブランチBへ移動
$ git checkout [ブランチB]

・マスターに対してrebaseを実行
$ git rebase master

・merge同様、衝突したら修正

before
*******内容*******
<<<<<<< HEAD
マスターブランチの変更
=======
ブランチBの変更
>>>>>>> issue3
******************

after
*******内容*******
マスターブランチの変更
ブランチBの変更
******************

・適応
$ git add [ファイル名]
$ git rebase --continue

-----------------------------
■修正したい
-----------------------------
・直前のコミットを修正したい
$ git commit -m "コメント"
$ git commit --amend
$ git commit -m "修正コメント"

・直前のコミットを捨てる
$ git reset --hard HEAD~

・特定のコミットまですてる
$ git reflog #ログの確認
$ git reset --hard HEAD@{[ログで確認した番号]}

-----------------------------
■用語
-----------------------------

・ブランチ(branch)
	履歴の流れを分岐していく為のもの

・masterブランチ(master branch)
	リポジトリに最初にコミット行うと最初にできるブランチ

・チェックアウト(checkout)
	ブランチを変更すること

・マージ(merge)
	ブランチを結合すること

・プル(pull)
	リモートリポジトリの変更履歴を取得
	ローカルリポジトリに変更がない場合は単にfast-forwardマージが行われる
	ローカル、リモート両方で変更があって衝突した場合は、解決してコミット
	実は pull = fetch + merge

・フェッチ(fetch)
	プルしてしまうと、リモートリポジトリの内容が自動的にマージされてしまう
	単にリモートリポジトリの内容を確認したいだけのときはフェッチを使う
	フェッチを行うと、取得したコミットは名前のないブランチとして取り込まれる
	このブランチはFETCH_HEADとしてチェックアウトできる
	この状態からマージする場合はFETCH_HEADをマージするかプルする

・プルリクエスト(pull request)
	開発者のローカルリポジトリでの変更を他の開発者に通知する機能
	Git自身の機能ではなく、GitHubがもつ機能
